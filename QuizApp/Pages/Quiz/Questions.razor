@page "/Questions/"
@page "/Questions/{category}"
@inject IJsonToModel _quiz
@using QuizApp.Data
@inject Token token 
@inject NavigationManager _navigationManager

<div class="text-center">
    <div hidden=@finishLoading>
        <img src="images/work-computer.gif" style="border-radius: 20%;">
    </div>

    @if (finishLoading)
    {

        @if (!finishWithQuiz)
        {
            <label>Question @(counter + 1):</label>
            <div>
         <p>Difficulty: @difficulty[counter]</p>       
        <p>@questionsList[counter]</p>
    </div>
            <div>
        @foreach (var a in allAnswers[counter])
                {
                    <div>
                    
                        <button @onclick="@(e => NewQuestion(a))" class="btn btn-success mb-2" style="width: 160px">@a</button>
                    </div>
                }
            </div>
        }
        else
        {
            <h1>
                Here is the result:
            </h1>
            @foreach (var item in questionsList)
            {
                <h3>@item</h3>
                @foreach (var answer in allAnswers[counter])
                {
                    @if (answer == correctAnswers[counter])
                    {
                        <div class="text-success">@answer</div>
                    }
                    else
                    {
                        <div>@answer</div>
                    }
                }
                @if (userAnswers[counter] == correctAnswers[counter])
                {
                    <div class="text-success">You answered: @userAnswers[counter]</div>
                }
                else
                {
                    <div class="text-danger">You answered: @userAnswers[counter]</div>
                }
                counter++;
            }
            <button @onclick="BackToMainPage" class="btn btn-dark">Back</button>
        }
    }
</div>

@code {
    [ParameterAttribute]
    public string category { get; set; }
    private List<List<string>> allAnswers = new();
    private List<string> correctAnswers = new();
    private List<string> userAnswers = new();
    private List<string> questionsList = new();
    private int counter = 0;
    private bool finishWithQuiz = false;
    private bool finishLoading = false;
    private List<string> difficulty = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var questionsFromApi = await _quiz.GetQuestions(Enum.Parse<Category>(category.ToLower()), Difficulty.everyDifficulty, 10, token.token);

            foreach (var item in questionsFromApi.Results)
            {
                difficulty.Add(item.Difficulty);
                questionsList.Add(item.Question); // Adding sting of question to list
                allAnswers.Add(item.IncorrectAnswers); // Adding list of incorrect answers
                correctAnswers.Add(item.CorrectAnswer); // Adding string of correct answer to list
            }
            for (int i = 0; i < allAnswers.Count(); i++)
            {
                Console.WriteLine(allAnswers[i].Count());
                if (allAnswers[i].Count() != 1)
                {
                    Console.WriteLine("Adding correct answer to list and randomize the answers");
                    allAnswers[i].Add(correctAnswers[i]); // Adding correct answer to list of answers
                    allAnswers[i] = allAnswers[i].OrderBy(x => Guid.NewGuid()).ToList(); // Randomize the list of answers
                }
                else
                {

                    // If the question is a boolean type        
                    allAnswers[i].Add(correctAnswers[i]);
                    allAnswers[i].Sort();
                    allAnswers[i].Reverse();

                    Console.WriteLine("This is a true or false question");
                }

            }

            finishLoading = true;
            StateHasChanged();
        }

    }
    private void NewQuestion(string answer)
    {
        if (counter == (questionsList.Count() - 1))
        {
            userAnswers.Add(answer);
            finishWithQuiz = true;
            counter = 0;
        }
        else
        {
            userAnswers.Add(answer);
            counter++;
        }

    }
    private void BackToMainPage()
    {
        counter = 0;
        _navigationManager.NavigateTo("/");

    }
}
