@page "/Questions/"
@page "/Questions/{category}"
@inject JsonToModel Quiz
@inject NavigationManager _navigationManager

@if (!finish)
{
    <label>Question @(counter + 1):</label>
    <div>
    @Qs[counter]
</div>
    <div>
    @foreach (var a in Answers[counter])
        {
            <div>
                <button @onclick="@(e => NewQuestion(a))" class="btn btn-success mb-2" style="width: 160px">@a</button>
            </div>
        }
    </div>
}
else
{
    <h1>
    Here is the result:
</h1>
    @foreach (var item in Qs)
    {
        <h3>@item</h3>
        @foreach (var answer in Answers[answerCount])
        {
            @if (answer == CorrectAnswer[answerCount])
            {
                <div class="text-success">@answer</div>
            }
            else
            {
                <div>@answer</div>
            }

        }
        @if (UserAnswers[answerCount] == CorrectAnswer[answerCount])
        {
            <div class="text-success">You answered: @UserAnswers[answerCount]</div>
        }
        else
        {
            <div class="text-danger">You answered: @UserAnswers[answerCount]</div>
        }

        @if (UserAnswers[answerCount] == CorrectAnswer[answerCount])
        {
            System.Console.WriteLine("Correct");
        }
        else
        {
            System.Console.WriteLine("Wrong");
        }
        answerCount++;
    }

    <button @onclick="BackToMainPage" class="btn btn-dark">Back</button>
}
@code {
    [ParameterAttribute]
    public string category { get; set; }
    public List<List<string>> Answers { get; set; } = new();
    public List<string> CorrectAnswer { get; set; } = new();
    private List<string> UserAnswers = new();
    public Random rnd = new();
    private int counter = 0;
    private int questionCount = 0;
    private int answerCount = 0;
    private bool finish = false;

    List<string> Qs = new();
    protected override void OnInitialized()
    {
        foreach (var item in Quiz.GetQuestions(Enum.Parse<Category>(category.ToLower()), Difficulty.medium, 2).Results)
        {
            Qs.Add(item.Question);
            Answers.Add(item.IncorrectAnswers);  
            CorrectAnswer.Add(item.CorrectAnswer);
            questionCount++;
        }
        int counter = -1;
        @* foreach (var item in Answers)
        {
            counter++;
            item.Add(CorrectAnswer[counter]);
            item.OrderBy(x => Guid.NewGuid()).ToList();
            
        } *@

        for (int i = 0; i < Answers.Count(); i++)
        {
            Answers[i].Add(CorrectAnswer[i]);
            Answers[i] = Answers[i].OrderBy(x => Guid.NewGuid()).ToList();

        }
    }

    private void NewQuestion(string answer)
    {
        if (counter == (questionCount - 1))
        {
            UserAnswers.Add(answer);
            finish = true;
            System.Console.WriteLine("BE HERE");
            @* _navigationManager.NavigateTo($"/Questions/result"); *@
        }
        else
        {
            System.Console.WriteLine("User answer: " + answer);
            UserAnswers.Add(answer);
            System.Console.WriteLine("New question being serviced!");
            counter++;
        }

        System.Console.WriteLine("Question count: " + questionCount);
        System.Console.WriteLine("Counter: " + counter);
    }
    private void BackToMainPage()
    {
        _navigationManager.NavigateTo("/", true);

    }
}
