@page "/Questions/{category?}"
@inject IJsonToModel _quiz
@using QuizApp.Data
@inject Token token
@inject NavigationManager _navigationManager



<div class="text-center">

    <div hidden=@finishLoading>
        <br>
        <br>
        <br>
        @* <img src="images/work-computer.gif" style="border-radius: 20%; width:230px; height:230px"> *@
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>
@if (finishLoading)
{
    @if (!finishWithQuiz)
    {
        <br>
        <div class="text-center">
            <h3>Question @(counter + 1):</h3>
            <div>
                <p>Difficulty: @difficulty[counter]</p>
                <p>@questionsList[counter]</p>
            </div>
            <div>
                <div class="list-group ">
                    @foreach (var answer in allAnswers[counter])
                    {
                        <div>
                            <button type="button" @onclick="@(e => NewQuestion(answer))"
                    class="list-group-item list-group-item-action list-group-item-dark d-inline-block"
                    style="width: 160px">@answer</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {

        <table class="table table-hover table-bordered table-sm caption-top">
            <caption>Result:</caption>
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Question</th>
                    <th scope="col">Your Answer</th>
                    <th scope="col">Correct Answer</th>
                    <th scope="col">Incorrect Answers</th>
                </tr>
            </thead>

            @foreach (var question in questionsList)
            {
                <tbody class="table-group-divider">

                    @if (userAnswers[counter] == correctAnswers[counter])
                    {
                        succesOrNot = "table-success";
                        userCorrectAnswers++;
                    }
                    else
                    {
                        succesOrNot = "table-danger";
                    }
                    <tr class="@succesOrNot">
                        <th scope="row">@(counter + 1)</th>
                        <td>@question</td>
                        <td>@userAnswers[counter]</td>

                        <td>
                            @(string.Join(",", allAnswers[counter].Where(x => x == correctAnswers[counter])))
                        </td>

                        <td>
                            <span class="m-2">@(string.Join(" ", allAnswers[counter].Where(x => x != correctAnswers[counter])))</span>
                        </td>

                    </tr>
                </tbody>
                counter++;
            }
        </table>

        <div>You got @userCorrectAnswers of @questionsList.Count() correct answers</div>
        <br>
        <div>
            <button @onclick="BackToMainPage" class="btn btn-dark">Back</button>
        </div>
    }
}

@code {
    [ParameterAttribute]
    public string category { get; set; }
    private List<List<string>> allAnswers = new();
    private List<string> correctAnswers = new();
    private List<string> userAnswers = new();
    private List<string> questionsList = new();
    private int userCorrectAnswers = 0;
    private int counter = 0;
    private bool finishWithQuiz = false;
    private bool finishLoading = false;
    private List<string> difficulty = new();
    private string succesOrNot;
    protected override async Task OnParametersSetAsync()
    {
        category = category ?? "computer";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var questionsFromApi = await _quiz.GetQuestions(Enum.Parse<Category>(category.ToLower()), Difficulty.easy, 2,
            token.SessionToken);

            foreach (var item in questionsFromApi.Results)
            {
                difficulty.Add(item.Difficulty);
                questionsList.Add(item.Question); // Adding sting of question to list
                allAnswers.Add(item.IncorrectAnswers); // Adding list of incorrect answers
                correctAnswers.Add(item.CorrectAnswer); // Adding string of correct answer to list
            }
            for (int i = 0; i < allAnswers.Count(); i++)
            {
                Console.WriteLine(allAnswers[i].Count());
                if (allAnswers[i].Count() != 1)
                {
                    Console.WriteLine("Adding correct answer to list and randomize the answers");
                    allAnswers[i].Add(correctAnswers[i]); // Adding correct answer to list of answers
                    allAnswers[i] = allAnswers[i].OrderBy(x => Guid.NewGuid()).ToList(); // Randomize the list of answers
                }
                else
                {

                    // If the question is a boolean type
                    allAnswers[i].Add(correctAnswers[i]);
                    allAnswers[i].Sort();
                    allAnswers[i].Reverse();

                    Console.WriteLine("This is a true or false question!");
                }
            }

            finishLoading = true;
            StateHasChanged();
        }
    }
    private void NewQuestion(string answer)
    {
        if (counter == (questionsList.Count() - 1))
        {
            userAnswers.Add(answer);
            finishWithQuiz = true;
            counter = 0;
        }
        else
        {
            userAnswers.Add(answer);
            counter++;
        }
    }
    private void BackToMainPage()
    {
        counter = 0;
        _navigationManager.NavigateTo("/");

    }

}
